Friedrich Schiller Universität Jena
07737 Jena | Germany


Fakultät für Mathematik und Informatik
Institut für Informatik


SixSigma4SOA


Ein konzeptuelles Framework zur Qualitätsverbesserung in der
Modellierung von serviceorientierten Softwarearchitekturen auf
Basis von Six Sigma am Beispiel eines Projekts in der Schweizer
Bundesverwaltung


Dissertation zur Erlangung des akademischen Grades
doctor rerum naturalium (Dr. rer. nat.)
an der Friedrich Schiller Universität Jena


Vorgelegt dem Rat der Fakultät für Mathematik und Informatik
der Friedrich-Schiller-Universität Jena von:
Dipl. Ing. (FH) Arnold Senn
geboren am 14.02.1967 in Worms


Gutachter:


Prof. Dr. Andreas Hartmann
Prof. Dr. Ursula Oesing
Prof. Dr. Wilhelm R. Rossak


Gutachter:


1. Prof. Dr. Andreas Hartmann


Professur für angewandte Informatik mit Schwerpunkt verteilte Anwendungen und
deren Sicherheit,


Fakultät Digitale Transformation,


HTWK Leipzig


2. Prof. Dr. Ursula Oesing


Professur im Fachbereich Elektrotechnik und Informatik,
Fachbereich Elektrotechnik und Informatik,
Hochschule Bochum


3. Prof. Dr. Wilhelm R. Rossak
Lehrstuhl für Softwaretechnik,
Department of Computer and Information Science,
Friedrich-Schiller University (FSU) Jena


Tag der öffentlichen Verteidigung:


Jena, 23. April 2021


Situation


Die grafische Modellierung, dies steht außer Frage, ist in IT-Projekten immer wieder ein
Kriterium, bei dem die Meinungen sehr konvergent sind und zu höchst unterschiedlichsten
Entscheidungen führen. Zweifelsfrei tragen qualitativ hochwertige, grafische Modelle in
IT-Projekten einen nicht unerheblichen Beitrag zur erfolgreichen Zielerreichung bei. Hohe
Aufwände in der Modellierung und eine auch damit nicht selten verbundene zu hohe
Interpretationsfähigkeit der Inhalte resultieren jedoch in eine Ablehnung der grafischen
Modellierung, wie dies aktuell in IT-Projekten wieder zunehmend festgestellt werden
muss. Das Thema einer zielgerichteten und hochwertigen Modellierung ist heterogen und
entsprechend komplex.


Mit einem Blick auf das Ganze lässt es sich in der folgenden Kausalkette zusammenfassen:
Modellierung ist zu aufwendig und somit zu kompliziert, dies hat eine erhöhte Fehleran-
fälligkeit in der Modellierung zur Folge, was zu Verunsicherungen in der Verwendung der
Modellinhalte führt, wodurch fehlerhafte Realisierungen erfolgen und den Projekterfolg
negativ beeinflussen können.


Ergo: Modellierung stellt ein Projektrisiko dar.


Diese zusammenfassende Darstellung differenziert an dieser Stelle nicht zwischen den
verschiedenen Arten von Modellqualität und möglicher Ursachen. In Projekten, in de-
nen Qualitätssicherungen durchgeführt werden, erfolgt dies üblicherweise auf Basis von
Qualitätskontrollen, bei denen identifizierte Defizite im Modell unmittelbar korrigiert
werden. Dies wirkt sich jedoch nur auf die in der Modellierung nachgelagerten Entwick-
lungsschritte eines IT-Projekts aus. Eine Rückkopplung zu den Ursachen findet in den
seltensten Fällen statt. Das Risiko, eines Wiederauftretens der identifizierten Fehler wird
hier nur unzureichend berücksichtigt.


Ergebnis


In dieser Arbeit wird der Standpunkt vertreten, dass zur Verbesserung und langfristigen
Sicherung der Qualität von grafischen Modellen stärker die Ursachen als die Ergebnisse
zu betrachten sind. Im Rahmen dieser Arbeit wird dies gegenüber der genannten Quali-
tätskontrolle als Qualitätssicherung bezeichnet und bedarf zweier wichtiger Faktoren.
Zum einen ist ein qualitätssichernder Prozess notwendig, der die Ursachen vorhandener
Qualitätsdefizite identifiziert und beseitigt und somit die erforderliche Rückkopplung
herstellt, anstatt sich nur auf die Korrektur der Ergebnisse zu konzentrieren. Zum zweiten
ist die Verwendung eines Qualitätsmodells notwendig, welches im Prozess als Maßstab
angewendet wird.


Der Inhalt dieser Arbeit betrachtet hierzu die mögliche Adaptierbarkeit des anerkannten
Verbesserungsprozesses Six Sigma in den Kontext der grafischen Modellierung. So
werden Werkzeuge bzw. Vorgehensempfehlungen der Six Sigma ISO Norm auf Ihre
Anwendbarkeit untersucht und überführt.


Auf Basis dieser Adaptionen wird der Verbesserungsprozess SixSigma4SOA (mit dem
dafür notwendigen Meta-Modell und weiterer notwendiger Werkzeuge) entwickelt, der
das Ergebnis dieser Arbeit darstellt. Wie gezeigt wird, ist SixSigma4SOA, analog zu Six
Sigma, im Meta-Modell offen für die Integration bestehender Qualitätsmodelle, wodurch
der zweite genannte Faktor erfüllt wird.


Die Anwendbarkeit von SixSigma4SOA und die Betrachtung von Qualitätskriterien
in der grafischen Modellierung von IT-Projekten erfolgt anhand der Modellierung von
serviceorientierten Architekturen (ohne der Notwendigkeit auf aktuell angewendete Archi-
tekturprinzipien eingehen zu müssen), da sich hier eine entsprechende Veranschaulichung
von unterschiedlichen Abstraktionsstufen bietet.


Der entwickelte Verbesserungsprozess wurde im Rahmen dieser Arbeit bereits mehrmals
erfolgreich angewendet, wovon zwei unterschiedliche Szenarien Teil dieser Ausarbeitung
sind und zeigen, dass hierdurch ein wirtschaftlicher Nutzen und Vorteil geschaffen werden
konnte.


Dadurch konnte die wichtigste These dieser Arbeit, dass sich anhand einer Adaptierung
von Six Sigma die Qualität in grafischen Modellen langfristig verbessern lässt, bestätigt
werden.


Situation


Graphical modeling, there is no question about it, is always a criterion in IT projects
where opinions are very convergent and lead to the most diverse decisions. There is no
doubt that high-quality, graphical models in IT projects make a significant contribution
to the successful achievement of objectives. However, high efforts in modelling and
a frequently associated too high interpretability of the contents result in a rejection
of graphical modelling, as is increasingly being observed in IT projects. The topic of
targeted and high-quality modeling is heterogeneous and accordingly complex.


With a view to the whole it can be summarized in the following causal chain: Modeling
is too costly and therefore too complicated, which results in an increased susceptibility
to errors in the modeling, which leads to uncertainties in the use of the model contents,
which can lead to incorrect realizations and have a negative impact on the success of the
project.


Ergo: Modeling represents a project risk.


At this point, this summary does not differentiate between the different types of model
quality and possible causes. In projects in which quality assurance is performed, this is
usually done on the basis of quality controls, in which identified deficits in the model are
immediately corrected. However, this only affects the downstream development steps
of an IT project in the modeling. Feedback on the causes rarely occurs. The risk of a
recurrence of the identified errors is only insufficiently considered here.


Conclusion


In this thesis, the view is taken that in order to improve and ensure the quality of
graphical models in the long term, the causes should be considered more than the
results. In the context of this thesis this is called quality assurance in comparison to the
mentioned quality control and requires two important factors.


On the one hand, a quality assurance process is necessary that identifies and eliminates
the causes of existing quality deficits and thus provides the necessary feedback instead
of only focusing on the correction of the results. Secondly, the use of a quality model is
necessary, which is used as a benchmark in the process.


The content of this thesis considers the possible adaptability of the recognized improve-
ment process Six Sigma in the context of graphical modeling. Thus, tools and process
recommendations of the Six Sigma ISO standard are examined for their applicability and
transferred. Based on these adaptations the improvement process SixSigma4SOA (with
the necessary meta-model and other necessary tools) is developed, which is the result
of this work. As it is shown, SixSigma4SOA, analogous to Six Sigma, is open for the
integration of existing quality models in the meta-model, thus fulfilling the second
mentioned factor.


The applicability of SixSigma4SOA and the consideration of quality criteria in the gra-
phical modeling of IT projects is based on the modeling of service-oriented architectures
(without the need to deal with currently applied architectural principles), since this
provides a corresponding illustration of different levels of abstraction.


The developed improvement process has already been successfully applied several times
in the context of this thesis. Two different scenarios are part of this elaboration and
show that an economic benefit and advantage could be created.


Thus, the most important thesis of this work, that an adaptation of Six Sigma can
improve the quality in graphical models in the long run, could be confirmed.


1.1 Kurzeinführung


Zu Beginn eines jeden Projekts sind neben der genauen Definition und Festlegung der
Projektziele, Maßnahmen zur Einhaltung der Kosten- und Zeitrahmen auch Themen wie
zum Beispiel der Art und Weise des Anforderungsmanagements, den Möglichkeiten der
technischen Umsetzung und der Realisierung, sowie der Festlegung der Projektbeteiligten
im Unternehmen und der Beteiligung von Fremdfirmen zu beantworten.


Nun sind dies keine speziellen Themen, die ein IT-Projekt ausmachen. In vielen tech-
nischen Projekten ist es seit hunderten von Jahren üblich, auch eine gewisse Art von
technischen Zeichnungen oder auch Modelle vor einer Realisierung anzufertigen.


In der Realisierung von IT-Projekten hat sich die grafische Modellierung jedoch bis zum
heutigen Zeitpunkt immer noch nicht „flächendeckend“ durchgesetzt und stößt immer
wieder neu auf Skepsis und Ablehnung. Das Zitat$$$1$$$ eines führenden Entwicklers eines
deutschen Unternehmens „Wir entwickeln in unsere Abteilung die notwendige Software
für technische Komponenten unserer Autos eigentlich mit Outlook, Excel und JIRA.“ gibt
die oft erschreckende Situation wieder.


In einer Zeit, in der Time-to-market das Projektgeschäft bestimmt, wird die grafische
Modellierung in IT-Projekten leider immer wieder als lästiger Faktor angesehen. Es ist
leider unstrittig, dass in IT-Projekten immer wieder neu eine Diskussion geführt wird,
gerade heute, in der ein starker Wandel nach agilen Projekten erkennbar ist (ohne, nach
meiner Erfahrung, dass die Beteiligten oft genau wissen, was dies eigentlich bedeutet),
in der die Modellierung als kostentreibendes Hindernis angesehen wird.


Unstrittig sollte aber eigentlich sein, dass der Einsatz der grafische Modellierung zu
einem größeren Projekterfolg und somit zu einer Realisierung führen kann, die von


höherer Qualität und Einhaltung des Kostenrahmens geprägt ist, als wenn weitgehend
auf grafische Modelle verzichtet wird.


„Kann“ aus dem Grund, da der genaue Umfang der grafischen Modellierung und de-
ren Detailtiefe leider allzu oft nur oberflächlich und mit geringer Bewertung in diese
Diskussionen mit einfließen und schlussendlich schon mit geringem Einsatz fälschlicher-
weise große Ergebnisse und damit verbundene Verbesserungen erwartet werden. Dieser
minimalistischer Ansatz ist zum Scheitern verurteilt.


Im Rahmen der Abstimmung über die Aspekte eines IT-Projekts, die grafisch modelliert
werden sollen (z.B. nur Prozesse und/oder Datenmodelle und/oder Systemlandschafts-
architekturen usw.), ergibt sich auch unweigerlich die daraus abzuleitende Frage der
Detaillierungstiefe und den damit verbundenen Anforderungen an die Qualität einer
Modellierung (z.B. Abbildung nur der fachlichen und/oder auch der technischen Pro-
zessbeschreibungen, ausschließliche Modellierung nur konzeptioneller Datenmodelle oder
auch Abbildung der technischen, normalisierten und physikalischen Modelle, usw.).


Es stellt sich die einfache Frage: "Wenn die Entscheidung zugunsten der grafischen
Modellierung getroffen wurde, wie detailreich sollte diese sein, damit sie dem Projekt
nutzt?"


In einer engen Abhängigkeit zur Beantwortung der vorangegangenen Fragen des Umfangs
und der Detaillierung ist in Folge auch eine Entscheidung über die zu verwendende
Notation(en) und somit auch eine Auswahl der zu verwendenden Diagrammarten und
Elemente zu fällen. So können z.B. Prozesse mit verschiedenen Notationsarten modelliert
werden (z.B. BPMN$$$2$$$-Process vs. UML$$$3$$$-Activity).


Wurde eine Entscheidung zugunsten der Modellierung getroffen, sind die wichtigsten
Ziele, die durch einen qualitativ hochwertigen Einsatz der Modellierung in IT-Projekten
erreicht werden sollten:


• Gemeinsame, möglichst interpretationsfreie Sprache zwischen den verschiedenen
Projektbeteiligten bzw. Stakeholdern und ihren unterschiedlichen Sichtweisen auf
das Projekt (z.B. Fachabteilungen vs. Softwareentwicklung)


• Frühzeitiges Erkennen von möglichen Problemen, Risiken und Auswirkungen in
der Umsetzung auf Basis durchgängiger Modelle anhand von Impact Analysen.


• Verbesserung in der Qualität der Realisierungsergebnisse durch möglichst interpre-
tationsfreie Vorgaben in der Modellierung


• Kostenreduzierung in der Realisierung aufgrund einer Reduzierung von Missver-
ständnissen, Fehlinterpretationen und Abstimmungsaufwänden


$$$2$$$siehe auch Kapitel 2.4.2 Business Process Model and Notation (BPMN)
$$$3$$$siehe auch Kapitel 2.4.3 Unified Modeling Language (UML)


• Einhaltung zeitlicher Zielvorgaben unter Beibehaltung der zu Projektstart defi-
nierten umzusetzenden Anforderungen


Reduziert auf ein Minimum an Aussagen könnte dies lauten


„Bevor wir lange reden, lass uns ein Bild malen, denn dies sagt mehr als tausend Worte.“


Ausgehend von dem genannten Grundgedanken einer grafischen Modellierung in IT-
Projekten und dem damit verbundenen Ziel eines allgemein besseren Gesamtverständnis-
ses (z.B. eine grafische Prozessbeschreibung gegenüber einer rein textuellen Beschreibung)
ist die Zielerreichung einer interpretationsfreien Beschreibung und Dokumentation auch
von der Entscheidung abhängig, ob die Modellierung auf Verhalten oder Strukturen oder
im Idealfall auf die Kombination beider Aspekte angewendet wird. Unter der Verwendung
eines Datenmodells kann z.B. das vorhandene Verhaltensmodell eines Prozesses um eine
weitere Dimension der strukturellen Information erweitert und verfeinert werden.


Am Beispiel der grafische Prozessmodellierung sei erwähnt, dass diese mittlerweile auch
in verschiedenen Projektstandards und Normen empfohlen, umgesetzt und angewendet
wird. Zu nennen sind hier z.B. verschiedene Bereiche in ITIL®$$$4$$$ oder auch verschiedenen
ISO-Normen (z.B. ISO 9001:2015 [49]). Auf einer noch allgemeineren Ebene, die sich
nicht nur auf die IT bezieht, wird z.B. in verschiedenen Phasen eines Six Sigma Projekts
[40][41] die Erstellung von Prozessmodellen empfohlen.


Die grafische Modellierung in IT-Projekten ist angefangen von einer sehr fachlichen
und abstrakten Beschreibung der zu realisierenden Prozesse über die Abbildung großer
verteilter Systemlandschaften bis hin zu einer sehr technischen (und evtl. hardwarena-
hen) Modellierung ein sehr komplexes, umfangreiches und differenziert zu betrachtendes
Themengebiet. So orientiert sich diese Arbeit in der Betrachtung der Modellierung
von Services bzw. Servicelandschaften in serviceorientierten Architekturen auf mögliche
Qualitätsverbesserungen dieser Modelle.


An dieser Stelle sei bereits betont, dass eine spezifischen Unterscheidung der verschiede-
nen Arten von SOAs$$$5$$$ in dieser Arbeit nicht erfolgt, da angenommen werden kann, dass
die Arten der Architekturen sich zwar auf Modellinhalte, aber nicht mögliche Arten der
Modellierung und den geforderten Qualitätsmerkmale und damit verbundenen Risiken
signifikant auswirken.


Schlussendlich ergibt sich aber aus der Beantwortung der Frage eines Einsatzes zugunsten
der grafischen Modellierung in IT-Projekten die nächste Frage: „Wie kann sicher gestellt
werden, dass die Modelle die notwendige Qualität besitzen, damit aus diesen der erhoffte
Mehrwert entstehen kann.“


$$$4$$$IT Infrastructure Library [7] 5


$$$5$$$kITlasIsnifsrcahsetrSuOctAuremLitibkroamryp[l7e]xen Systemen vs. MicroServices mit kleinen in sich abgeschlossenen
Einheiten


1.2 Problemstellung


Die Kriterien, die zu einer Entscheidung für oder gegen eine Modellierung in IT-Pro-
jekten führen und sich somit auf die Qualität des Projekts auswirken, sind oft nicht
eindeutig nachvollziehbar. In indirektem Zusammenhang zu dieser Entscheidung steht
die Umsetzung der Qualitätssicherung der erstellten und verwendeten grafischen Modelle
und der Bewertung eines daraus möglichen abgeleiteten Mehrwerts für das Projekt bzw.
Folgeprojekte. Die Thematik des Mehrwertes findet aufgrund der gemachten Erfahrungen
in vielen Projekten weitgehend nicht die notwendige Beachtung.


So führten viele Gespräche mit IT-Architekten und Entwicklern oft zu kontroversen
Diskussionen, aber leider einem gemeinsamen Ergebnis:


Modellierung kann helfen, aber das „Wie“ und das „Was“ sind oft nicht
genau definiert und somit wird sie zu einem Risiko, einem Risiko,
dass dann unsinnigerweise einfach durch Ausschluss der Modellierung
komplett eliminiert wird.


Das Ergebnis, dass die grafische Modellierung sich positiv auf das Ergebnis auswirken
kann, aber in der Summe sehr oft darauf bewusst verzichtet wird, um Risiken, die oft
nicht genau genannt und beschrieben werden können, zu vermeiden zeigt, dass hier eine
detailliertere Betrachtung notwendig ist.


In der gängigen Literatur zu den Themen „Modellierung“ und „SOA“ nimmt das Thema
„Modellqualität“ leider nur einen sehr kleinen bis nicht vorhandenen Raum ein. Ist es
doch ein wichtiges Thema, dass bei der Realisierung eines IT-Projekts nicht ignoriert
und erst recht auch nicht isoliert betrachtet werden darf. Wie Unhelkar [93] schreibt:
„... we must unterstand that model quality is not the only aspect of quality in a project.
Model quality exists within the context of other quality dimensions or levels, and these
influence each other...“.


Ein Modell ist keine Insel, die von einem bestimmten Personenkreis quasi als Selbstzweck
erstellt werden kann. Es stellt vielmehr eine grafische Dokumentation des Gesamtprojekts
dar, auf das über alle Realisierungsphasen einer SOA von der Entwicklung bis hin
zum laufenden Betrieb zugegriffen wird. Entwicklungsphasen sind auch immer von der
Qualität der vorangegangenen Arbeitsschritte abhängig. Wie in Abb. 1.1 beispielhaft
und stark vereinfacht über mögliche Entwicklungsphasen hinweg dargestellt, steigt das
Risiko einer fehlerhaften Realisierung aufgrund einer schlechten Modellqualität mit
jeder Entwicklungsphase. Dies ist nun keine neue Erkenntnis und lässt sich auf alle
Entwicklungs- und Realisierungsprojekte anwenden. Umso erstaunlicher ist es, dass dem
Thema einer nicht ausreichenden Modellqualität aktuell so wenig Beachtung geschenkt


wird und zum jetzigen Zeitpunkt noch keine genaueren Betrachtungen über mögliche
Risiken in der Modellierung$$$6$$$ von SOA-Projekten und deren Minimierungen existieren.


Abb. 1.1: Allgemein gebräuchliche und vereinfachte, schematische
Darstellung von Modellierungsabhängigkeiten zwischen
gebräuchlichen Phasen eines SOA-Projekts
(Farben in Anlehnung an TOGAF [90]) [Zeichnung:
Senn]


Zur grafischen Modellierung selbst (von ArchiMate® über BPMN und UML bis zu den
verschiedenen Arten der Datenmodellierung,...) existiert ein recht umfangreiches Angebot
an Literatur und Abhandlungen, diese bewegen sich jedoch fast immer im Elfenbeinturm
der idealen Projektwelt oder ziehen sich auf die Definitionen der Notation zurück.
In meiner nun über 20jährigen beratenden Tätigkeit in Projekten unterschiedlicher
Größe und unter anderem auch als IT-Trainer wird mir immer wieder die Frage nach
entsprechender Literaturempfehlung zum Thema „Modellqualität“ gestellt, die ich leider
nicht zufriedenstellend beantworten kann.


So durfte bzw. musste ich in meiner beruflichen Tätigkeit schon einige „Modellfriedhöfe
aufräumen“. Dies waren fast immer das Ergebnis einer zu Projektbeginn zugunsten der
grafischen Modellierung gefällten Entscheidung, ohne die damit verbundene Risiken
zu bewerten und zu berücksichtigen, sowie die Ziele der Modellierung und den damit
notwendigen Qualitätszielen zu fixieren. Die Erwartung, dass mit Modellen alles besser
wird, hatte vielleicht existiert, wäre der qualitätsgetriebene Einsatz aber als eine ver-
bindliche Voraussetzung und Basis für den Projektabschluss fixiert worden, wäre eine
wertschöpfenden Verwendung dieser „Modellfriedhöfe“ nicht zum Problem geworden.


$$$6$$$Hiervon ausgenommen sind zahlreiche Abhandlung über Softwarequalität.


In Projekten werden sehr oft nur ein bis zwei Schriftsprachen (z.B. Englisch und/oder
Landessprache) angewendet, was rein sprachlich nicht das größte Risiko darstellt, da in
den allermeisten Fällen, neben der englischen Sprache, eine der verwendeten Sprachen
die Mutter- oder Amtssprache der Projektbeteiligten ist. In der Modellierung kommen
jedoch oft verschiedene Notationen mit unterschiedlichen Diagrammarten und Elementen
zum Einsatz, die zudem den Projektbeteiligten bei weitem nicht so vertraut sind, wie
die eigene Muttersprache in Wort und Schrift.


So wie z.B. auch die Anwendung der verwendeten Schriftsprachen durch die Projektbe-
teiligte in den Projektdokumenten nicht tiefergreifend hinterfragt wird, wird bei einer
Anwendung der Modellierung oft fälschlicherweise auch von einem allgemeinen ausrei-
chenden Kenntnisstand der Projektbeteiligten in der Modellierung ausgegangen.


Ein gerne gesagter Satz, ohne die Realität wirklich abzufragen, lautet: „Unsere Leute
können alle UML$$$7$$$ bzw. BPMN$$$8$$$, die Modellierung ist kein Problem.“ Die Ergänzung,
dass die genannten Personen dieses u.U. doch vor kurzem erst auf einer Schulung kennen
gelernt haben, zeigt die fehlende Sensibilität für dieses Thema.


Theorie und Realität treffen hier sehr oft konträr aufeinander. Die eigentlichen Voraus-
setzungen und Inhalte, die den Kenntnisstand der Projektbeteiligten in der Modellierung
in einer sehr individuellen Ordinal-Skala mit „können alles“ oder mindestens „ausrei-
chend“ festlegen, werden allzu oft ignoriert bzw. nicht mit der notwendigen Aufmerk-
samkeit betrachtet und beurteilt.


Der bereits zitierte Grundgedanke der Aussage, dass ein Bild mehr als tausend Worte
sagt, wird in diesem Fall mit steigender Komplexität der Modelle immer mehr zu
einem neuen Risikofaktor in Projekten. Ein Modell ist immer eine Abstraktion der
Realität [93] deren zu erbringenden Abstraktionstiefe sehr oft nicht genau spezifiziert
wird. Aufgrund mangelnder Kenntnis besteht die Gefahr eines starken auseinander
driften von unzureichender Qualität der Modellinhalte und der tatsächlichen Realität.
Beim Erkennen der Diskripanzen In diesem Zusammenhang, wird dann doch einmal das
Thema der Modellqualität betrachtet, gehen die Bemühungen in die Verbesserung der
Modellinhalte. Dies kann, und dies zu erwähnen sollte eigentlich schon überflüssig sein,
nur von kurzer Dauer sein, wenn die Ursachen nicht beseitigt werden.


So können hier vorab zur Veranschaulichung der Problematik die wichtigsten Aspekte
bzw. Risiken genannt werden, die im Bereich der Modellierung, aufgrund gemachter
Erfahrungen, oft nur unzureichend Berücksichtigung finden:


• Wie groß ist das Gesamtverständnis aller Beteiligten eines SOA-Projekts für die
angestrebte Modellierungstiefe und der damit verbundenen Detaillierung?


$$$7$$$Unified Modeling Language [69]
$$$8$$$Business Process Model and Notation [65]


• Welche Notationen werden zur Modellierung gewählt und sind diese zur Erreichung
der Ziele geeignet?


• Welche Erfahrungen und Kenntnisse im Bereich der Modellierung sind bei den
Projektbeteiligten, die die Modelle erstellen bzw. lesen bzw. verstehen müssen,
vorhanden? Zu nennen sind hier die nicht unbeachtlichen Risiken, einer falschen
Verwendung der Modellelemente der gewählten Notation durch die verschiedenen
Projektbeteiligten.


(Oft werden aus Kosten- und Zeitdruck entsprechende Weiterbildungen und Schu-
lungen auf das Minimum beschränkt.)


• Welche Maßnahmen zur Qualitätssicherung der Modellierungsergebnisse werden
angewendet? Wird durch das Modell die Realität bzw. das zu erstellende Ziel
grafisch richtig abgebildet oder geht die modellierende Person nur davon aus, dass
dies richtig ist?


Dies bedeutet, dass die Modellelemente durchaus im Sinne der Spezifikation der
gewählten Modellierungssprache richtig angewendet werden, aber die Abstraktion
u.U. nicht der Realität entspricht.
Dies soll in Abb. 1.2 beispielhaft dargestellt werden, in der zwei Blackbox-Systeme
über die genau beschriebene Schnittstelle „Interface“ kommunizieren.


Das System „BlackBoxSystem-1“ (BBS1) realisiert diese Schnittstelle und ein
zweites System „BlackBoxSystem-2“ (BBS2) benötigt diese. So wird dies z.B. in der
UML mit den entsprechenden Elementen für «realize»$$$9$$$ und «use»$$$10$$$ Beziehungen
eindeutig definiert und dargestellt.


Was kann nun aber für die weniger erfahrene modellierende Person eine „Realisie-
rung“ bzw. „Verwendung“ bedeuten? Ihr ist vielleicht die Bedeutung des „Reali-
sierungs“ Elements nicht bewusst. Für sie „wandern“ lediglich Daten immer von
BBS1 zu BBS2. Den Aspekt einer „Hol- bzw. Bringschuld“ bzgl. der Daten werden
hier u.U. vielleicht nicht ausreichend berücksichtigt.


Bedeutet eine Realisierung entweder eine Datenentgegennahme mit anschließender
Verarbeitung oder die Aufbereitung und Bereitstellung der benötigten Daten, die
über diese Schnittstelle ausgetauscht werden? Die richtige Verwendung der Symbole
für die Schnittstellenrealisierung und -verwendung kann ein Modellierungsgegen-
stand sein, der für technische IT-Mitarbeiter außer Frage steht, in der fachlichen
Modellierung aber unter Umstände für große Verwirrung und falscher Modellierung
sorgen kann. Die Auswirkungen eines falschen Modells z.B. in einer serviceori-
entierten Architektur können dann erheblich sein, da eine Schnittstelle anstatt


$$$9$$$Definiert, dass das entsprechende System die in der Schnittstelle geforderte Funktionalität bereitstellt.
$$$10$$$Definiert, dass das entsprechende System die in der Schnittstelle geforderte Funktionalität benötigt
bzw. verwendet.


eindeutig und einmalig an einem System redundant an n Systemen implementiert
werden muss. Diese Gefahr ist umso größer, umso weniger eine Abstimmung in
einem Projekt zwischen den Arbeitsgruppen stattfindet.


Es ist auch festzustellen, dass zum aktuellen Zeitpunkt keine eindeutigen Reifegradmo-
delle für die verschiedenen Phasen in der IT-Modellierung existieren. Eine qualitative
Bewertung von Modellen ist immer noch mit einem enormen menschlichen Aufwand
verbunden. Dieser Aufwand steigt mit der Agilität von Projekten und somit den ver-
wendeten Modellen. Die Übernahme von daraus gewonnenen Erkenntnissen und die
Umsetzung von daraus abgeleiteten Verbesserungen in den individuellen Modellierungs-
aufgaben für Folgeprojekte bleiben oft aus. (Eine gern getätigte Aussage, nachdem die
Probleme weitgehend beseitigt oder einfach akzeptiert wurden, ist: „Eigentlich wissen
wir gar nicht, was wir jetzt noch verbessern sollen. Das Projekt ist fertig und im nächsten
sieht es vermutlich eh ganz anderes aus.“)


Zusammenfassend darf gesagt werden, dass die Art und Weise und die damit verbundenen
Erwartungen und Ziele, wie grafische Modelle in SOA-Projekten eingesetzt werden,
zum aktuellen Zeitpunkt unter den Aspekten möglicher Qualitätsverbesserungen nur
individuell (und oft nur sehr projektspezifisch) betrachtet wurden bzw. werden und
immer noch ein erhebliches Risiko in der Realisierung von SOA-Projekten darstellen.


1.3 Qualität in der Modellierung


Die Einsatzmöglichkeiten einer grafischen Modellierung in IT-Projekten ist nicht auf
eine bestimmte Vorgehensweise in der Realisierung oder bestimmte Technologien be-
grenzt und erstreckt sich von sehr hardwarenahen Embedded Systemen über dezentrale
Anwendungen (z.B. Apps) bis zu großen, verteilten Systemen. Der Einsatz von Modellen
garantiert aber per se noch keinen höheren Projekterfolg gegenüber IT-Projekten ohne
grafischem Modellierungsanteil. Nur qualitativ hochwertige Modelle ermöglichen auch
einen höheren Projekterfolg und werden dann nicht zu einem schlecht einschätzbarem
Risiko.


Nun ist es kein Geheimnis, dass auch viele Jahre nach der Einführung des Paradigmas
der serviceorientierten Architekturen es noch immer unzählige Bücher, Fachvorträge,
Arbeiten und Diskussionen darüber gibt, wie die Qualität in diesen Projekten verbessert
werden kann. Jedoch beschäftigt sich fast kein Buch oder Vortrag mit der Qualität
von grafischen Modellen in einer SOA. Das Thema ist schwer greif- und messbar und
wird vermutlich aufgrund dieser Tatsachen gemieden bzw. umgangen oder anhand stark
vereinfachter Beispiele nur kurz angerissen.


Der Aspekt der Qualität von Modellen sollte jedoch immer Teil eines Qualitätsmanage-
ments im Kontext einer SOA sein.


Dies soll in Abb. 1.3 vereinfacht dargestellt werden, in der hier im Bereich des Qua-
litätsmanagements eines IT-Projekts zwischen den verschiedenen Bereichen („Quality
of...“ ), in denen Qualität definiert werden kann, unterschieden wird. Aufgrund der
Tatsache, dass dies ein grundsätzliches Problem darstellt, werden in dieser Darstellung
die gebräuchlichen Phasen einer Produktentwicklung stark verallgemeinert von oben
nach unten gezeigt, ohne hier auf ein bestimmtes Vorgehen (z.B. nach TOGAF® [90])
genauer eingehen zu wollen. Die dargestellten Phasen können auch unabhängig von der
Vorgehensweise (z.B. Wasserfallmodell$$$11$$$ vs. agile Softwareentwicklung$$$12$$$) angewendet
und betrachtet werden.


Der Bereich der „Quality of Service“13 (QoS) am Ende der Entwicklungsstrecke, mit der
Überprüfung der Erfüllung der geforderten Servicevereinbarungen$$$14$$$, erhält aus meiner
Erfahrung heraus die mit Abstand größte Aufmerksamkeit. Dieser Bereich wurde in der
Vergangenheit intensivst und mehr oder weniger erfolgreich behandelt und in Projekten
umgesetzt. Der Grund hierfür liegt in der „Greifbarkeit“ und somit der automatisierten
Testbarkeit der Ergebnisse. Dieser Bereich wird im Rahmen dieser Arbeit nicht weiter
betrachtet.


$$$11$$$Ein nicht iteratives Vorgehensmodell (siehe Kap. 7.2, bei dem die einzelnen Phasen nacheinander
bis zur technischen Bereitstellung der geforderten Funktionalität durchlaufen werden. 12


$$$12$$$z.B. mit Scrum, siehe Kap. 7.3, in der diese Phasen in kurzen Abständen iterativ wiederholt
durchlaufen werden) werden die einzelnen Phasen iterative durchlaufen und das Projekt inkrementel
realisiert.


$$$13$$$Erfüllung der nicht funktionalen Anforderungen an den Service, wie z.B. Antwortzeiten, Wartezeiten,
durchschnittliche Verfügbarkeit, max. tolerierte Ausfallzeiten 14


$$$14$$$hier wird sehr häufig die englische Bezeichnung Service Level Agreements (SLA) verwendet


Abb. 1.3: Zusammenführung von Projektphasen eines SOA-Projekts
mit dazugehörigen Qualitätsbereichen
(Farben in Anlehnung an ArchiMate® [91]) Inhalt:
allgemeingültig bekannt, [Zeichnung: Senn]


Qualitätssicherung ist jedoch keine Aufgabe, die erst am Ende einer Entwicklungskette
[23, S. 181] beachtet werden darf. Lauer und Juwig [51] argumentieren, dass ein aktives
Qualitätsmanagement ein wichtiger Teil eines SOA-Projekts ist, der von Anfang bis zum
Ende permanent gelebt werden muss.


Durch die Verbreitung von agilen Methoden in der Realisierung von IT-Projekten erhält
aktuell das Thema „Qualität“ augenscheinlich bereits in früheren Phasen der Realisierung
wieder eine stärkere Aufmerksamkeit. Bei genauerer Betrachtung von täglichen Abläufen
in verschiedenen Projektumsetzungen fällt jedoch auf, dass z.B. gegenüber einem Was-
serfallmodell, die Realisierungsphase bedeutend früher startet. Dadurch wird lediglich
innerhalb des Entwicklungsteams der Bereich „Quality of Code“ und in Abstimmung
mit dem Kunden die Umsetzung der Anforderungen früher betrachtet. Der Bereich
„Quality of Design“ erhält in agilen Projekten häufig noch weniger Beachtung. Dies
wird irrtümlich oft mit einem der Ziele des agilen Manifestes „Working software over
comprehensive documentation“ [82] begründet, bei dem in vielen Projekten anscheinend
aus einem „over“ ein „instead“ wird.


Leider bezieht sich der Aspekt der Qualitätssicherung im Bereich der Realisierung somit
schwerpunktmäßig auf den Bereich der eigentlichen Entwicklung und spart das Thema
der Modellierung unverständlicherweise sehr oft noch mehr aus. Die Bewertung und
Untersuchung von Aspekten wie z.B. das Verhältnis von Codezeilen zu Kommentaren


oder z.B. der Cyclomatic complexity15 als Teil von „Quality of Code“ (QoC) setzen jedoch
erst bei der Realisierung ein. Die Phase der Modellierung, die einer Realisierung (und dies
gilt für Wasserfall-getriebene wie agile Projekte gleichermaßen) vorgelagert ist, wird im
Bereich der Qualitätssicherung aufgrund ihrer bereits genannten „Nichtgreifbarkeit“ sehr
oft gemieden. Besitzen evtl. vorhandene Modelle aufgrund mangelnder Fürsorge auch
nicht eine notwendige Mindestqualität, so schließt sich der Kreis und die Modellierung
wird zum Kostenfaktor ohne Mehrwert.


Es ergibt sich die dringliche Frage, was verbessert werden kann, damit eine SOA nicht nur
den QoC und QoS erfüllt, sondern vielmehr auch zeit- und kostengerecht die gestellten
funktionalen Anforderungen modellbasiert umsetzen und erfüllen kann.


Dieser nun viel wichtigere Aspekt eines übergreifenden Qualitätsmanagements, erstreckt
sich von den Inhalten des Anforderungsmanagement, über die Analyse und das De-
sign, bis zur Realisierung. Dieser Bereich soll, wie in Abb. 1.3 für ein Projekt in der
klassischen Vorgehensweise des Wasserfallmodells$$$16$$$ dargestellt, hier nun als „Quality of
Model“ bezeichnet werden.


Da die Modellierungsergebnisse dieser Entwicklungsphasen jedoch schwer bis gar nicht
automatisiert testbar sind, findet sehr oft unvernünftigerweise keine Qualitätsprüfung
und -sicherung der erstellten Modellinhalte statt.


Mehr als einmal wurde in Projekten die sehr ähnliche Aussage „Wir wissen ja, was
gemeint ist.“ getätigt, damit nach einiger Zeit über den gleichen Modellteil „Das stimmt
so überhaupt nicht und wird im System ganz anders umgesetzt.“ geurteilt wurde.


Basierend auf der genannten Problematik unzureichender Modellqualitäten behandelt
diese Arbeit nun eine Möglichkeit der Qualitätsverbesserung der Modellierung innerhalb
von SOA-Projekten.


Ziel wird es aber nicht sein, Modelle durch Nachbearbeitung nachträglich qualitativ zu
verbessern bzw. hierzu notwendige Qualitätsmodelle zu definieren. Über die vielfältigen
und möglichen Qualitätsmodelle u.a. auch aus der Softwareentwicklung abgeleitet, existie-
ren bereits viele Arbeiten. Auch haben diese bereits teilweise Einzug in die Spezifikation
von grafischen Notationen gefunden. Ebenfalls darf ein nachträgliches Überarbeiten von
Modellinhalten zur Verbesserung der Modellqualität nicht die angestrebte Lösung sein.


Nach dem Grundsatz „Der Weg ist das Ziel.“ kann eine erfolgreiche Qualitätsverbesserung
nur durch eine Verbesserung des Modellierungsprozesses erreicht werden.


Diese Arbeit untersucht, ob durch die gezielte Anwendung der Six Sigma Vorgehens-
weise$$$17$$$, die in der Industrie eine anerkannte und gelebte Vorgehensweise zur Qualitäts-


$$$15$$$Beschreibt die möglichen Wege durch ein betrachtendes Softwaremodul 16


$$$16$$$siehe hierzu Kapitel 7.2 Lineares Vorgehen 17


17sSiieehhee hhiieerrzzuu KKaappiitteell 75.


verbesserung ist, eine Verbesserung von grafischen Modellen in SOA-Projekten erreicht
werden kann.


Im Bereich der Realisierung existieren bereits einige Ansätze der Qualitätsverbesserungen
durch den Einsatz der Six Sigma Methodik wie z.B. bei Sun (heute Oracle) mit Sun
Sigma. Diese sind jedoch auf spezielle Entwicklungsumgebungen beschränkt.


Ein allgemein gültiger Ansatz zur Qualitätsverbesserung bzw. -sicherung auf Basis von
Six Sigma im Bereich der Modellierung (Quality of Model), über Fachabteilungsgrenzen
mit ihren Stakeholdern und ihren unterschiedlichen Sichtweisen, Fachkenntnissen und
Anforderungen hinweg, existiert zum heutigen Zeitpunkt noch nicht bzw. wird weitgehend
ignoriert oder auch nur ansatzweise in Projekten betrachtet.


1.4 Fragen der Forschung


In der IT stellt es sich aktuell so da, dass die Modellierung schwerpunktmäßig eher bei
Neuprojekten zum Einsatz kommt. In der Realität ist es aber auch so, dass die wenigsten
Projekte Neuentwicklungen sind. In den allermeisten Fällen werden bestehende Systeme
angepasst bzw. erweitert. Existieren bei bestehenden Architekturen keine Modelle,
werden diese dann oft nur punktuell nachträglich in Modellen erfasst, wenn Anpassungen
vorzunehmen sind bzw. Optimierungen an Architekturen bzw. bestehenden Prozessen
und deren Realisierung erfolgen müssen. Ein durchgängiges Modell wird in diesen Fällen
selten existieren. Die Gründe hierfür sind vielfältig und hauptsächlich finanzieller bzw.
menschlicher Natur und entsprechende Entscheidungen aus fachlicher und technischer
Sicht allzu oft rational, jedoch nicht immer im Sinne einer umfassenden Qualitätssicherung
nachvollziehbar. Hier ist es umso wichtiger, dass das Wenige, was modelliert wurde,
sich durch eine hohe Qualität auszeichnet. Die Qualität dieser Modelle zeichnen sich
in einer ersten Betrachtung durch die beiden wichtigen Kenngrößen „Richtigkeit“ und
„Vollständigkeit“ aus.


Aus der geschilderten Situation leiten sich u.a. folgende Fragen ab:


• Warum wird der Qualität von Modellen in der IT immer noch so wenig Bedeutung
geschenkt?


• Wie kann sich eine Qualitätsverbesserung allgemeingültig nachweisen lassen?


• Welchen Einfluss auf die Modellierung hat die Anwendung eines Systems zur
Prozessverbesserung?


• Warum beschäftigt sich die gebräuchliche Fachliteratur und wissenschaftliche
Qualitätsverbesserung nur wenig bis gar nicht und dann nur sehr allgemeingültig
mit diesem Thema?


Aus diesen leitet sich dann die Frage dieser Arbeit ab:


• Wie kann ein qualitätsgestütztes Vorgehensmodell aussehen, in dem die Modellie-
rung mit dem anerkannten Managementsystem zur Prozessverbesserung Six Sigma
verbunden wird?


1.5 Zu erbringender Beitrag
1.5.1 Ziele


Das Ziel und der Grundgedanke dieser Arbeit wird unter der Betrachtung der geschil-
derten Problemstellung und dem Gedanken des Mikrokosmos im Makrokosmos, in dem
Probleme in individuelle Teilprobleme aufzuteilen sind, sein:


Wie kann die Qualität der Modellierungsergebnisse in SOA-Projekten ana-
lysiert, gemessen und verbessert werden, um dieses Vorgehen auf andere
Projekte adaptieren zu können?


Somit wird folgende erste These (siehe hierzu auch Kapitel 8) aufgestellt:


Die Qualität von grafischen Modellen in der Entwicklung von ser-
viceorientierten Architekturen kann durch die Überführung von
Six Sigma in den Kontext der Modellierung und der Verbesse-
rung der verantwortlichen Modellierungsprozesse indirekt verbes-
sert und langfristig gesichert werden.


Hierzu werden die Inhalte bestehender grafischer Modelle mit dem im Rahmen dieser
Arbeit entwickelten Verbesserungsprozesses auf Basis von Six Sigma analysiert, aus-
gewertet und daraus mögliche Verbesserungen im angewendeten Modellierungsprozess
herausgearbeitet.


Dieses entwickelte Vorgehen trägt den Namen SixSigma$$$4$$$SOA und stellt das Ergebnis
dieser Arbeit da.


Die bereits aus Kap. 1.2 bekannten stark vereinfachten und gebräuchlichen Projektphasen
zeigen in der vereinfachten Abb. 1.4 das Grundprinzip eines möglichen Modellierungs-
prozesses$$$18$$$, bei dem nicht das Modell mit seinen Inhalten verändert, sondern der damit
verbundene Modellierungsprozess optimiert werden soll. Hierdurch soll eine notwendige
Rückkopplung von den Modelldefiziten auf die verantwortlichen Ursachen analysiert und


$$$18$$$Dies ist unabhängig von der Art des Vorgehens und ob sich die dargestellten Phasen auf ein
umfangreiches Projekt oder einen Sprint bezieht.


hergestellt werden. Die daraus abgeleiteten und entwickelten Verbesserungen können
zukünftig in der Modellierung angewendet werden, um eine höhere „Quality of Model“ zu
erhalten.


Die Durchführung eines SixSigma4SOA-Projekts ist unabhängig vom Modellierungspro-
zess in jeder Phase eines SOA-Projekts möglich.


Der Verbesserungsprozess muss ein genau spezifiziertes Vorgehen besitzen, welches
trotzdem flexibel auf die verschiedenen Phasen eines SOA$$$19$$$-Projekts angewendet werden
kann. Der Prozess darf nicht an bestimmten Phasen bzw. Arbeitsergebnisse gebunden
sein und muss losgelöst bzw. parallel zum eigentlichen Entwicklungsprozess ausführbar
sein. Dies bedingt, dass keine Abhängigkeiten zu einem bestimmten Vorgehen (z.B.
sequenzielles Vorgehen$$$20$$$ oder agiles Vorgehen$$$21$$$) bestehen dürfen.


Abb. 1.4: Anwendung von SixSigma4SOA in möglichen Phasen
eines SOA-Projekts
(Farben in Anlehnung an ArchiMate® [91]) [Senn]


Diese Arbeit leistet hierzu im Wesentlichen folgende Beiträge:


• Analyse der qualitätsbeeinflussenden Faktoren in der Modellierung von serviceori-
entierten Architekturen durch Befragung von Verantwortlichen in der Entwicklung,
Zusammenfassung meiner langjährigen Erfahrungen, wie auch einer Analyse der
in Projekten am meisten eingesetzten wissenschaftlichen Literatur.


• Umfangreiches Literaturstudium, welches die erforderlichen Qualitätsmaßnahmen
mit ihren Messmethoden und mögliche gewünschte Verbesserungen analysiert.


$$$19$$$SOA wird im Rahmen dieser Arbeit im Kontext von IT-Landschaften zur Bereitstellung geforderter
Services, ungeachtet einer möglichen technischen Realisierung, betrachtet. 20


e2r0vzic.Bes,Wuansgseearfcahltle(tsieeihneerKmaöpg.l7ic.2h)e 21


21zz..BB.WScarsusmerfa(sllie(hseieKheapK.a7p..3)7


• Entwicklung eines qualitätsgestützten Vorgehensmodells auf Basis von Six Sigma,
dass die Lösungswege zur Reduzierung bzw. Beseitigung von Modellierungsdefiziten
abbildet.


• Auf Basis dieses qualitätsgestützten Vorgehensmodells werden die Thesen (Kap. 8,
S. 301) anhand eines realen Projekts (das aufgrund des Datenschutzes hier nur
eingeschränkt dokumentiert werden kann) analysiert, bestätigt oder widerlegt.


Diese Arbeit soll einen Beitrag dazu liefern, wie ein qualitätsgetriebener Verbesserungs-
prozess in der grafischen Modellierung von SOA-Softwareprojekten die Ergebnisse mess-
und wiederholbar verbessern kann.


1.5.2 Ergebnis


Zur Verbesserung von Modellqualitäten in SOA-Projekten wird das Ergebnisse dieser
Arbeit zweistufig angewendet werden. Wie in der folgenden Abb. 1.5 dargestellt, nimmt
das zu verbessernde SOA-Projekt (2) eine zentrale Rolle ein.


In einer initialen Anwendung wird in ($$$1$$$) mit SixSigma4SOA ein bestehendes SOA-Pro-
jekt (2) mit dem Ziel, aus den Ergebnissen erste Qualitätsverbesserungsmaßnahmen
ableiten zu können, analysiert. In dieser initialen Anwendung werden vorhandene Model-
lierungsergebnisse eines SOA-Projekts (z.B. modelliert in BPMN oder UML) und deren
Erstellungsprozesse (als Teil des Entwicklungsprozesses) betrachtet bzw. untersucht.
Diese Analyse dient der Gewinnung von Informationen über die Eigenschaften eines
vorhandenen oder eines noch unpräzise definierten Modellierungsprozesses. Das Ergebnis
kann jedoch auch die Erkenntnis sein, dass aktuell kein Modellierungsprozesses für das
zu verbessernde Projekt durchgängig definiert bzw. angewendet wird.


In ($$$1$$$) schließt sich eine Untersuchung darüber an, wie die Qualität der Modellierung mit
SixSigma4SOA (durch Einsatz der auf die Modellierung adaptierten Six Sigma Vorgehens-
weise) verbessert und die aktuelle Modellqualität auf ein höheres Six Sigma Niveau (siehe
auch [40]) angehoben werden kann. Daraus wird für das entsprechende SOA-Projekt (2)
die Definition und Erarbeitung eines anzuwendenden Modellierungssprozesses initiiert
(für den Fall, dass kein Modellierungsprozess definiert ist) bzw. für den Fall eines bereits
vorhandenen Modellierungsprozesses bereits erste Verbesserungsmaßnahmen eingeleitet.
Der Abschluss der initialen Anwendung bildet die Manifestierung der regelmäßigen und
kontinuierlichen Durchführung von SixSigma4SOA im Unternehmen.


In ($$$3$$$) wird im Anschluss auf Basis der gewonnenen Erkenntnisse der initialen Anwendung
SixSigma4SOA kontinuierlich zur Qualitätsverbesserung in aufeinander folgenden Six-
Sigma4SOA-Projekten angewendet.


Es muss jedoch auch berücksichtigt werden, dass eine initiale Durchführung in ($$$1$$$)
aufgrund geringer vorhandener Informationen und somit eventuell mit einer geringeren
Anzahl von Werkzeugen von SixSigma4SOA durchgeführt wurde, als dies dann in (3)
getan werden kann, was eine reduzierte Menge an Ergebnissen für die erste kontinuierliche
Verbesserungen zur Folge hat. So kann das Ergebnis der initialen Durchführung das
Konzept eines Modellierungsprozesses oder einer Modellierungsmethodik darstellen, das
in der kontinuierlich Anwendung zu detaillieren ist.


Die in Abb. 1.5 innerhalb des SixSigma4SOA-Projekts grau dargestellten SixSigma4SOA-
Modelle$$$22$$$ bilden das zu entwickelnde SixSigma4SOA-Meta-Model ab und dienen
der strukturierten und modellbasierten Dokumentation der Vorgehensweise bzw. der
Untersuchungsergebnisse und sind Bestandteil des Verbesserungsprozesses. Somit kön-
nen die gewonnenen Erkenntnisse, wie bereits in Kap. 1.5.1 aufgeführt, auf weitere
SOA-Modellierungsprozesse übertragen und angewendet werden.


Dies unterstützt die Empfehlung der Six Sigma ISO Norm „ISO:13053-2“ [41], zu verbes-
sernde Prozesse mit geeigneten Modell- bzw. Diagrammarten zu dokumentieren.
Das SixSigma4SOA-Meta-Model beinhaltet alle wichtigen Artefakte und ist somit die


$$$22$$$Das SixSigma4SOA-Modell wird hier lediglich aufgrund der Übersichtlichkeit doppelt dargestellt.


Hauptinformationsquelle eines SixSigma4SOA-Projekts. Diese Modelle sind entsprechend
Abb. 1.5 völlig losgelöst von den später in Kap. 2.6 aufgeführten Modellierungsebenen
zur Beschreibung einer serviceorientierten Architektur zu betrachten. Die Inhalte der
im Rahmen eines SixSigma4SOA-Projekts erstellten SixSigma4SOA-Modelle werden in
dieser Arbeit auf Ihre Qualität hin nicht weiter untersucht.


Da die Six Sigma ISO Norm die Vorgehensweise zu Qualitätsverbesserungen in einem
DMAIC-Regelkreis$$$23$$$ allgemeingültig und ohne explizite Vorgaben einer grafischen Mo-
dellierung betrachtet, kann das hier spezifisch betrachtete Problem einer schlechten bzw.
fehlerhaften Modellierung innerhalb von Six Sigma (bzw. SixSigma4SOA-) Projekten
nicht explizit behandelt werden. Auch werden keine Qualitätsprüfungsverfahren zur
Bewertung dieser SixSigma4SOA-Modelle, die im Rahmen eines SixSigma4SOA-Projekts
erstellt werden, festgelegt.


Hieraus lassen sich die Schritte 1. und 3. mit einem eventuell snotwendigen Zwischen-
schritt ableiten:


FOOTNOTE:1. Initiale Anwendung von SixSigma4SOA zur Identifikation und Verbes-
serung von Modellierungsdefiziten
Auf Basis von Vorgehenstechniken und Methodenwerkzeugen, die in SixSigma4SOA
(auf Basis von Six Sigma) definiert sind, wird die Modellierung genau festzule-
gender Betrachtungsebenen eines SOA-Projekts untersucht und analysiert. Diese
initiale Durchführung dient auch der Gewinnung von Erkenntnissen, auf denen zu
entscheiden ist, ob sich SixSigma4SOA mit seinen Anforderungen im Unternehmen
anwenden lässt.


2. Können im Rahmen der zeitlichen festgelegten initialen Durchführung von Six-
Sigma4SOA nicht die erforderlichen Erkenntnissen gewonnen werden, um erste
Regeln abzuleiten, die dauerhaft in SOA-Projekten und wenn möglich in einem
Modellierungswerkzeug angewendet werden sollen (z.B. Richtlinien, Verwendung
von Diagrammarten, Einschränkung/Verfeinerungen auf Ebene der Modellelemen-
te, Prüfmechanismen,..) und auch die kontinuierliche Anwendung zu manifestieren,
so folgt eine weitere Durchführung im Rahmen eines SixSigma4SOA-Projekts. In
diesem sollten die Ziele der initialen Anwendung weitgehend unverändert übernom-
men werden. Dieser Sonderfall berücksichtigt Situationen, in denen eine Analyse
aufgrund vieler Unbekannten und der damit aufwendigen Informationsbeschaffung
aufwendiger, als initial angenommen ausfällt.


FOOTNOTE:3. Kontinuierliche Anwendung von SixSigma4SOA zur stetigen Verbesse-
rung


Durch die regelmäßige Durchführung wird im Unternehmen ein Bewusstsein für


$$$23$$$siehe Kapitel 5.4


FOOTNOTE:die notwendige Modellqualität geschaffen. Zur Akzeptanz- und Bewusstseinsverbes-
serung eines Qualitätsverbesserungsprozess konzentriert sich dieser immer nur auf
spezielle Aspekte der Modellierung, die in kurzer Zeit verbessert werden können.
Dadurch können bei einer verantwortungsvollen Anwendung indirekt nachhaltig
die Modellierungsergebnisse verbessert werden. Die Modellierung in SOA-Pro-
jekten erfolgt dann auch auf Basis der durch die regelmäßig Durchführung von
SixSigma4SOAgewonnen Verbesserungen.


1.5.3 Ausschluss


Diese Arbeit betrachtet die Möglichkeiten der Verbesserung der grafischen Modellierung
durch die Verbesserung des damit verbundenen Modellierungsprozesses.


Die Weiterentwicklung vorhandener Qualitätsmodelle oder eine Neuentwicklung ist
jedoch nicht Teil dieser Arbeit.


Ebenfalls umfasst diese Arbeit explizit keine Neuentwicklung von Modellierungsprozessen,
da das hier entwickelte Vorgehensmodell weitgehend auf die in Projekten bewährten
Vorgehensweisen anwendbar sein muss.


In dieser Arbeit werden die Kriterien, die für die Auswahl spezieller Modellierungs-
werkzeuge zu berücksichtigen sind, ebenfalls nur soweit wie für diese Arbeit notwendig
betrachtet. So wie Modellierungssprachen und Six Sigma keine Modellierungswerkzeuge,
sondern nur Notationen bzw. Methoden$$$24$$$ vorgeben, wird diese Arbeit auch nicht auf
die Auswahl eines bestimmten Modellierungswerkzeuges eingehen.


Dass die in dieser Arbeit erstellten Diagramme und die entwickelten Vorgehensweisen
mit einem geeigneten Modellierungswerkzeug erstellt wurden, ist ein elementarer und
notwendiger Teil der Arbeit, wobei das Werkzeug selbst jedoch nur eine sekundär Rolle
einnimmt und nicht als Voraussetzung bewertet und betrachtet wird, solange es die
erforderlichen Funktionalitäten zur Modellierung besitzt.


Ebenso wird sich die Arbeit nicht analytisch und wissenschaftlich mit den Themen der
Realisierung anhand einer bestimmten Programmiersprache (z.b. Java, C++/C#) oder
eine bestimmten Technologie (z.B. WEBServices mit JEE, XSD/WSDL, REST$$$25$$$-Services
mit HTTP) beschäftigen.


Aspekte, die die Hardware einer SOA betreffen sind ebenfalls kein Bestandteil dieser
Arbeit.


$$$24$$$In Six Sigma werden methodische Vorgehensweisen als Werkzeuge bezeichnet, diese sind jedoch
keine Werkzeuge im Sinne von IT-Anwendungen
$$$25$$$REST : REpresentational State Transfer


1.6 Inhaltsüberblick dieser Arbeit


FOOTNOTE:Der Aufbau dieser Arbeit orientiert sich konsequenter Weise an dem in der Abb. 1.6
dargestellten DMAIC-Kreis$$$26$$$ von Six Sigma.


Die folgende Abb. 1.7 stellt die Phasen dieser Arbeit mit den wichtigsten Arbeitsergeb-
nissen in dem stark vereinfachten Prozessablauf (BPMN) grafisch dar.


Define


In der Define-Phase erfolgt eine kritische Betrachtung des Systems und der zu verbes-
sernden Qualitätskriterien. Hierzu werden zu Beginn in Kapitel 2 die grundlegenden und
im Rahmen dieser Arbeit relevanten Aspekte einer SOA kritisch betrachtet und deren
grafischen Modellierungsmöglichkeiten identifiziert.


In Kapitel 3 erfolgt die Definition der Qualitätskriterien, die zur Verbesserung der
Modellierungsergebnisse zu beachten sind.


Im folgenden Kapitel 4 erfolgt die Erarbeitung eines Lösungsansatzes, mit der eine
gewünschte Qualitätssteigerung erzielt werden soll.


Measure


In der „Measure“-Phase werden die zu messende Größen und ihre Messmethoden festgelegt.
Somit werden in Kapitel 5 die für diese Arbeit relevanten Faktoren von Six Sigma, die im
Rahmen der Qualitätssteigerung auch Anwendung finden, betrachtet und beschrieben.


Analyse


FOOTNOTE:Im darauf folgenden Kapitel 6 erfolgt in der „Analyse“-Phase die Untersuchung und
Auswertung von Fehlern in der Modellierung, deren Klassifizierung, Metriken und
Messgrößen.


Improve


Nach einer kurzen Einführung möglicher Vorgehensmodelle in der Realisierung von
IT-Projekten in Kapitel 7, werden diese auf Ihre prinzipielle Verwendbarkeit in Verbin-
dung mit Six Sigma bewertet.


Kapitel 8 stellt als Teil der angestrebten Verbesserung die Thesen auf, die mit Six-
Sigma4SOA zu erreichen sind.


Im Anschluss erfolgt in Kapitel 9 die Entwicklung eines Vorgehensmodells, in dem Six
Sigma und die Modellierung von SOA-Projekten zusammengeführt werden, um in deren
Anwendung die gestellten These zu belegen.


Dieses neu entwickelte Vorgehensmodell wird in dieser Arbeit als „SixSigma4SOA“ und
die modellbasierte Abbildung als SixSigma4SOA-Meta-Model bezeichnet.


Dies, in der Abb. 1.7 symbolisch mit einem Blatt Papier dargestellten Elemente, stellen
das Ergebnis dieser Arbeit dar.


Control


Die reale Anwendung und Kontrolle des Vorgehensmodells „SixSigma4SOA“ erfolgt im
Kapitel 10.


Hier sei bereits gesagt, dass die hier aufgeführten Projektinformationen der realen Anwen-
dung aufgrund der vorgegebenen Geheimhaltungspflicht nicht umfassend veröffentlicht
werden dürfen, weswegen mit verallgemeinerten Beispielen gearbeitet werden muss.
Eine abschließende Zusammenfassung und Bestätigung der Thesen erfolgen dann im
Kapitel 11.


Serviceorientierte Architekturen


2.1 Einleitung


FOOTNOTE:Der Begriff „SOA“ (Serviceorientierten Architektur) hat in den letzten ca. 15 Jahren
eine Dynamik entwickelt, bei der immer wieder mit dem Versuch der Findung einer
eindeutigen Definition, gleichzeitig die Feststellung erfolgt, dass diese mit jedem Zuwachs
an technischen Möglichkeiten und der damit verbundenen organisationsübergreifenden
Einbindung von unterschiedlichen IT-Infrastrukturen immer allgemein gültiger werden
muss, die bestenfalls mit der vorangegangen Einführung des OO-Paradigmas verglichen
werden kann.


Aufgrund der Tatsache, dass die Einführung einer SOA und der damit verbundenen
Komplexität viele Bereiche in Unternehmen innerhalb und außerhalb der IT völlig
heterogenen Situationen betreffen, kann bis zum heutigen Datum keine eindeutige
Definition hierfür existieren.


Im Rahmen dieser Arbeit werden nun hier die Aspekte einer SOA betrachtet, die den
Bereich möglicher Verbesserungen in der grafischen Modellierung von serviceorientierten
Architekturen tangieren. Verbesserungen z.B. im Bereich der technischen Realisierungen,
der Infrastruktur oder auch der Anbindung und Gestaltung von Datenbank-Systemen
(DB-Systemen) bis hin zu DWH/BI-Lösungen (Data Warehouse / Business Intelligence)
sind nicht Teil dieser Arbeit.


Das Paradigma der serviceorientierten Architektur (SOA) wurde erstmals 1996 von
Gartner definiert und beschrieben, in der zusammenfassend erklärt wird, dass eine SOA
nicht nur eine spezielle Form der Umsetzung gewünschter Funktionalitäten auf Basis
FOOTNOTE:einer bestimmten Technologie sind: „A service-oriented architecture is a style of multitier
computing that helps organizations share logic and data among multiple applications and
usage modes.“ [$$$31$$$]


FOOTNOTE:Im Laufe der Jahre haben sich sowohl unterschiedliche Sichtweisen einer SOA, wie
auch Herangehensweisen an dieses Thema entwickelt. Ebenso existiert ein teilweise
sehr gegensätzliches Verständnis von der Bedeutung des Begriffs SOA. Die vielfältigen
Definitionen erstrecken sich von einer sehr punktuellen Sichtweise, die die technische
Umsetzung einer SOA betrachtet, über einen fachlich ausgerichtete Betrachtung einer ser-
viceorientierten Architektur, bis zur unternehmensweiten Sichtweise, die auch Faktoren
wie menschliche Ressourcen oder auch Auswirkungen auf das Management berücksichtigt.


So ist es nicht verwunderlich, dass eine offiziell verabschiedete Definition für serviceorien-
tierte Architekturen bis heute nicht existiert oder sich in einer Verabschiedung befindet.
Nach meiner Erfahrungen und meinen Einschätzungen wird dies aufgrund vielfach tech-
nisch unterschiedlicher Umsetzungsmöglichkeiten und des erwähnten unterschiedlichen
Gesamtverständnis des Begriffs auch in absehbarer Zeit nicht möglich sein. Ebenfalls
existiert auch kein Standard oder keine Definition darüber, was eine SOA betrachten
soll und was nicht.


So einfach die folgende Definition der OASIS1 auch sein mag, so bietet sie doch durch
ihre Allgemeingültigkeit keinen Raum für mögliche Kritik oder Einschränkungen an
der Aussage, beschränkt man sich hier doch bewußt nicht nur auf den fachlichen oder
technischen oder organisatorischen Aspekt einer SOA.


„Service Oriented Architecture (SOA) is a paradigm for organizing and uti-
lizing distributed capabilities that may be under the control of different
ownership domains.“ [64]


Ein großer Vorteil dieser Definition liegt darin, dass sie nicht auf die technischen Aspekte
die im Zusammenhang einer SOA stehen, wie z.B. der Realisierung (z.B. CORBA, JEE,
REST), Eigenschaften (z.B. Robustheit, Lastverteilung,...) oder auch Architekturmerk-
male (z.B. Busarchitektur, Service Repository,...) eingeht. Ebenfalls vermeidet sie jede
Arte der Beschreibungen möglicher Entwicklungsprozesse wie z.B. MDA (Model Driven
Architecture) oder BPEL (Web Services Business Process Execution Language) vs.
BPMN-Process-Engines. In dieser Definition wird vielmehr der sehr wichtige Aspekt der
unterschiedlichen Verantwortungen explizit berücksichtigt und betont.


Verantwortungen bzw. Zuständigkeiten haben in einer SOA einen sehr hohen Stellenwert.
Wurde z.B. vor ca. 20 Jahren einer monolithischen Single-Applikation und deren Archi-
tektur relativ oft nur von einem kleinen Personenkreis verantwortet, der die geforderte


$$$1$$$Organization for the Advancement of Structured Information Standards, www.oasis-open.org


FOOTNOTE:Funktionalität (Prozesse und verwendetet Daten) recht gut verstand, ist dies bei heutigen
verteilten und mitunter vielfach komplexeren SOA-Applikationen (Multi-Tier) nicht
mehr vorstellbar. Die Verantwortungen und Zuständigkeiten einer serviceorientierten
Architektur sind auf viele fachliche und technische Bereiche bzw. Verantwortlichkeiten
verteilt. Verbunden mit der Entwicklung von 1-Tier-Applikation, hin zur heutigen Um-
setzung einer komplexen und variabel nutzbaren SOA (u.U. bereits mit MicroServices,
SaaS$$$2$$$, PaaS$$$3$$$,...) ist auch der Bedarf an einer allgemein verständlichen Dokumentation
(und der damit verbundene Bedarf an Traceability zwischen den Dokumentationsar-
tefakten über mehrere Software-Releases) und somit im erweiterten Sinne auch der
Modellierungsbedarf über viele Zuständigkeitsbereiche stark gestiegen.


So muss ich immer wieder folgendes feststellen:


SOA-Umsetzungen ohne umfassende und qualitativ hochwertige grafische
Dokumentation sind mittelfristig (verwaltungstechnisch und somit finanzi-
ell) zum Scheitern verurteilt.


SOA zum Beispiel reduziert auf eine Art der Bereitstellung von IT-Dienstleistungen
anhand von WEB-Services zu definieren ist leider ein sehr gebräuchlicher, aber auch
falscher Ansatz (siehe hierzu auch [77]). So vertrete ich aufgrund meiner Erfahrungen
die Meinung, dass es ein großer Fehler war, vorhandenen Systemen übereilt eine Fassade
mit Web-Services zu verpassen und diese dann als erfolgreiche Umstellung auf SOA zu
titulieren. Einem der großen Ziele, auf das später noch eingegangen wird, der Unabhän-
gigkeit, konnte dadurch kein Stück näher gekommen werden. Es ist lediglich der Aufwand
(durch die Bereitstellung der Web-Service-Schnittstelle) gestiegen. Web-Services sind
auch nur eine Möglichkeit, die erforderlichen Funktionalitäten einer SOA technisch in
einer IT-Landschaft bereitzustellen. [46, Kap.:1.5.3]


Zu einer erfolgreichen SOA gehört jedoch viel mehr. Im Rahmen dieser Arbeit wird der
Bereich der Modellierung in Verbindung mit einer Verbesserung der Modellierungsqualität
betrachtet.


SOA bedeutet auch nicht eine andere oder auch modernere Beschreibung für eine
Realisierung von IT-Anwendungen auf der Java Enterprise Edition oder dem teilweise als
altmodisch angesehenen CORBA zu definieren. Dies erklärt sich bereits aus der Tatsache,
dass dann weitere technologische Arten der Realisierung wie z.B. der .NET-Plattform
von Microsoft ebenfalls einzuschließen wären. Es sollte immer bewusst sein, dass der
SOA-Begriff zu einem Zeitpunkt definiert wurde, als Technologien wie z.B. JEE, REST
oder auch .NET noch nicht verfügbar waren.


$$$2$$$Software as a Service


$$$3$$$Platform as a Service


Diese beginnt mit den ersten Anforderungen, geht über Prozess- und Datenbeschreibun-
gen und architekturellen Systembeschreibungen bis zur abschließenden Gesamtdokumen-
tation. Auf allen Ebenen der Dokumentation können bzw. idealerweise sollten Modelle
eingesetzt werden. Die Art und Weise der Modellierung unterscheidet sich jedoch stark
von der jeweils betrachteten Ebene innerhalb der SOA. Hier wird auch bewusst die Art
der Projektrealisation z.B. Wasserfall vs. Agile nicht berücksichtigt.


2.2 Was bedeutet SOA in der Praxis?


FOOTNOTE:Bei der Betrachtung und Analyse des Begriffs SOA stellt sich immer wieder die Frage
des Huhns und des entsprechenden Ei. Was war zuerst da? Die Idee einer SOA oder
das System, welches in eine Architektur überführt werden soll, die systemübergreifend
und serviceorientiert ausgerichtet ist? Eine SOA ist kein Selbstzweck und soll auch nicht
als technischer Hype (so er denn vor ca. 10-15 Jahren in der IT-Welt gelobt wie auch
kritisiert wurde) angesehen werden.


Zu Beginn soll der Begriff zuerst auf die Bedeutung der drei Wortteile einführend
betrachtet werden, bevor dann im Anschluss auf die fachlichen und technischen Aspekte
im Bereich der Modellierung eingegangen wird.


2.2.1 Service...


2.2.1.1 Unabhängigkeit


Eine Grundidee hinter einer SOA steht primär in der Bereitstellung von erforderlichen und
idealerweise unabhängigen Funktionalitäten, losgelöst von einer technischen Umsetzung.
Eine technische Umsetzung ist sekundär und sollte immer erst dann betrachtet werden,
wenn von allen Beteiligten definiert ist, was die SOA liefern soll. Dass eine vorhandene
Architektur einen Einfluss auf die Servicebeschreibungen nehmen kann ist unstrittig,
darf aber nicht in der primären Betrachtung liegen. Aspekte der Architektur werden
weiter unten noch genauer betrachtet.


Ein Service stellt eine in sich abgeschlossene Einheit mit genau definierter Funktionalität
dar.


Ein Service wird im OASIS-SOA-Referenzmodell [64] beschrieben als:


Der Begriff „Service“ wird in Wörterbüchern als „Die Durchführung einer
Aufgabe (einer Tätigkeit) von jemanden für einen anderen“ bezeichnet.


Ein Service ist keine umfassende Dienstleistung und darf nicht mit dieser verwechselt
werden.


